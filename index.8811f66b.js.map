{"mappings":"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","sources":["scripts/cipher.js","scripts/app.js"],"sourcesContent":["// prettier-ignore\nconst alphabets = {\n\ten: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n \tpl: ['A', 'Ą', 'B', 'C', 'Ć', 'D', 'E', 'Ę', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'Ł', 'M',\n 'N', 'Ń', 'O', 'Ó', 'P', 'R', 'S', 'Ś', 'T', 'U', 'W', 'Y', 'Z', 'Ź', 'Ż'],\n \tbg: ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р',\n 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ь', 'Ъ', 'Ю', 'Я'],\n \tjp: ['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ', 'が', 'ぎ', 'ぐ', 'げ', 'ご', 'さ', 'し',\n 'す', 'せ', 'そ', 'ざ', 'じ', 'ず', 'ぜ', 'ぞ', 'た', 'ち', 'つ', 'て', 'と', 'だ', 'ぢ', 'づ', 'で', 'ど', 'な', 'に', 'ぬ', 'ね', 'の', 'は', 'ひ', 'ふ', 'へ', 'ほ',\n 'ば', 'び', 'ぶ', 'べ', 'ぼ', 'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ', 'ま', 'み', 'む', 'め', 'も', 'や', 'ゆ', 'よ', 'ら', 'り', 'る', 'れ', 'ろ', 'わ', 'を', 'ん']\n};\n\nconst isUpperCase = letter => {\n  return letter === letter.toUpperCase()\n}\n\nconst determineLetterPosition = (letter, alphabet) => {\n  return alphabet.indexOf(letter.toUpperCase())\n}\n\nconst Cipher = {\n  alphabets: alphabets,\n  isUpperCase: isUpperCase,\n  determineLetterPosition: determineLetterPosition\n}\n\nexport default Cipher\n","import Cipher from './cipher'\n\nconst encodeButton = document.getElementById('encode')\nconst decodeButton = document.getElementById('decode')\nconst input = document.getElementById('input')\nlet activeMode = 'encode'\n\nconst makePrimary = button => {\n  button.classList.add('btn-primary')\n  button.classList.remove('btn-secondary')\n}\n\nconst makeSecondary = button => {\n  button.classList.add('btn-secondary')\n  button.classList.remove('btn-primary')\n}\n\nconst flip = event => {\n  const buttonThatWasClicked = event.target\n  if (buttonThatWasClicked === encodeButton) {\n    makePrimary(encodeButton)\n    makeSecondary(decodeButton)\n    activeMode = 'encode'\n  } else {\n    makePrimary(decodeButton)\n    makeSecondary(encodeButton)\n    activeMode = 'decode'\n  }\n}\n\nconst pressKey = event => {\n  if (activeMode === 'encode') {\n    encode()\n  } else {\n    decode()\n  }\n}\n\nconst determineLetter = (letter, currentPosition, shift, alphabet, encode) => {\n  const numberOfLetters = alphabet.length\n  let letterPosition\n  if (encode === true) {\n    letterPosition = currentPosition + shift\n  } else {\n    letterPosition = currentPosition - shift\n    if (letterPosition < 0) {\n      letterPosition = letterPosition + numberOfLetters\n    }\n  }\n  const index = letterPosition % numberOfLetters\n  if (Cipher.isUpperCase(letter)) {\n    return alphabet[index]\n  } else {\n    return alphabet[index].toLowerCase()\n  }\n}\n\nconst encode = () => {\n  const input = document.getElementById('input').value\n  const shift = parseInt(document.getElementById('shift').value)\n  const language = document.getElementById('language').value\n  const chosenAlphabet = Cipher.alphabets[language]\n  let output = []\n\n  for (let char of input) {\n    const currentPosition = Cipher.determineLetterPosition(char, chosenAlphabet)\n    if (currentPosition === -1) {\n      output.push(char)\n    } else {\n      output.push(determineLetter(char, currentPosition, shift, chosenAlphabet, true))\n    }\n  }\n  const cipherText = output.join('')\n  document.getElementById('output').value = cipherText\n}\n\nconst decode = () => {\n  const input = document.getElementById('input').value\n  const shift = parseInt(document.getElementById('shift').value)\n  const language = document.getElementById('language').value\n  const chosenAlphabet = Cipher.alphabets[language]\n  let output = []\n\n  for (let char of input) {\n    const currentPosition = Cipher.determineLetterPosition(char, chosenAlphabet)\n    if (currentPosition === -1) {\n      output.push(char)\n    } else {\n      output.push(determineLetter(char, currentPosition, shift, chosenAlphabet, false))\n    }\n  }\n  const cipherText = output.join('')\n  document.getElementById('output').value = cipherText\n}\n\nencodeButton.addEventListener('click', encode)\nencodeButton.addEventListener('click', flip)\n\ndecodeButton.addEventListener('click', decode)\ndecodeButton.addEventListener('click', flip)\n\ninput.addEventListener('keyup', pressKey)\n"],"names":["$7f4efca717b40913$export$2e2bcd8739ae039","alphabets","en","pl","bg","jp","isUpperCase","letter","toUpperCase","determineLetterPosition","alphabet","indexOf","$2a1b72ed268500cd$var$encodeButton","document","getElementById","$2a1b72ed268500cd$var$decodeButton","$2a1b72ed268500cd$var$input","$2a1b72ed268500cd$var$activeMode","$2a1b72ed268500cd$var$makePrimary","button","classList","add","remove","$2a1b72ed268500cd$var$makeSecondary","$2a1b72ed268500cd$var$flip","event","target","$2a1b72ed268500cd$var$determineLetter","currentPosition","shift","encode","numberOfLetters","length","letterPosition","index","toLowerCase","$2a1b72ed268500cd$var$encode","input","value","parseInt","language","chosenAlphabet","output","char","push","cipherText","join","$2a1b72ed268500cd$var$decode","addEventListener"],"version":3,"file":"index.8811f66b.js.map"}
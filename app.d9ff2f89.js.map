{"version":3,"sources":["scripts/cipher.js","scripts/app.js"],"names":["Cipher","alphabets","en","pl","bg","jp","isUpperCase","letter","toUpperCase","determineLetterPosition","alphabet","indexOf","encodeButton","document","getElementById","decodeButton","input","activeMode","makePrimary","button","classList","add","remove","makeSecondary","flip","event","target","pressEnter","keyCode","encode","decode","determineLetter","currentPosition","shift","numberOfLetters","letterPosition","length","index","toLowerCase","value","parseInt","language","chosenAlphabet","output","char","push","cipherText","join","addEventListener"],"mappings":"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","file":"app.d9ff2f89.js","sourceRoot":"..","sourcesContent":["const alphabets = {\n\ten: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n \tpl: ['A', 'Ą', 'B', 'C', 'Ć', 'D', 'E', 'Ę', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'Ł', 'M',\n 'N', 'Ń', 'O', 'Ó', 'P', 'R', 'S', 'Ś', 'T', 'U', 'W', 'Y', 'Z', 'Ź', 'Ż'],\n \tbg: ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р',\n 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ь', 'Ъ', 'Ю', 'Я'],\n \tjp: ['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ', 'が', 'ぎ', 'ぐ', 'げ', 'ご', 'さ', 'し',\n 'す', 'せ', 'そ', 'ざ', 'じ', 'ず', 'ぜ', 'ぞ', 'た', 'ち', 'つ', 'て', 'と', 'だ', 'ぢ', 'づ', 'で', 'ど', 'な', 'に', 'ぬ', 'ね', 'の', 'は', 'ひ', 'ふ', 'へ', 'ほ',\n 'ば', 'び', 'ぶ', 'べ', 'ぼ', 'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ', 'ま', 'み', 'む', 'め', 'も', 'や', 'ゆ', 'よ', 'ら', 'り', 'る', 'れ', 'ろ', 'わ', 'を', 'ん']\n};\n\nconst isUpperCase = (letter) => {\n\treturn letter === letter.toUpperCase();\n};\n\nconst determineLetterPosition = (letter, alphabet) => {\n\treturn alphabet.indexOf(letter.toUpperCase());\n};\n\nconst Cipher = {\n\talphabets: alphabets,\n\tisUpperCase: isUpperCase,\n\tdetermineLetterPosition: determineLetterPosition\n};\n\nexport default Cipher;","import Cipher from './cipher';\n\nconst encodeButton = document.getElementById('encode');\nconst decodeButton = document.getElementById('decode');\nconst input = document.getElementById('input');\nlet activeMode = 'encode';\n\nconst makePrimary = (button) => {\n\tbutton.classList.add('btn-primary');\n\tbutton.classList.remove('btn-secondary');\n};\n\nconst makeSecondary = (button) => {\n\tbutton.classList.add('btn-secondary');\n\tbutton.classList.remove('btn-primary');\n};\n\nconst flip = (event) => {\n\tconst buttonThatWasClicked = event.target;\n\tif (buttonThatWasClicked === encodeButton) {\n\t\tmakePrimary(encodeButton);\n\t\tmakeSecondary(decodeButton);\n\t\tactiveMode = 'encode';\n\t} else {\n\t\tmakePrimary(decodeButton);\n\t\tmakeSecondary(encodeButton);\n\t\tactiveMode = 'decode';\n\t}\n};\n\nconst pressEnter = (event) => {\n\tif (event.keyCode === 13) {\n\t\tif (activeMode === 'encode') {\n\t\t\tencode();\n\t\t} else {\n\t\t\tdecode();\n\t\t}\n\t}\n};\n\nconst determineLetter = (letter, currentPosition, shift, alphabet, encode) => {\n\tconst numberOfLetters = alphabet.length;\n\tlet letterPosition;\n\tif (encode === true) {\n\t\tletterPosition = currentPosition + shift;\n\t} else {\n\t\tletterPosition = currentPosition - shift;\n\t\tif (letterPosition < 0) {\n\t\t\tletterPosition = letterPosition + numberOfLetters;\n\t\t}\n\t}\n\tconst index = letterPosition % numberOfLetters;\n\tif (Cipher.isUpperCase(letter)) {\n\t\treturn alphabet[index];\n\t} else {\n\t\treturn alphabet[index].toLowerCase();\n\t}\n};\n\nconst encode = () => {\n\tconst input = document.getElementById('input').value;\n\tconst shift = parseInt(document.getElementById('shift').value);\n\tconst language = document.getElementById('language').value;\n\tconst chosenAlphabet = Cipher.alphabets[language];\n\tlet output = [];\n\n\tfor (let char of input) {\n\t\tconst currentPosition = Cipher.determineLetterPosition(char, chosenAlphabet);\n\t\tif (currentPosition === -1) {\n\t\t\toutput.push(char);\n\t\t} else {\n\t\t\toutput.push(determineLetter(char, currentPosition, shift, chosenAlphabet, true));\n\t\t}\n\t}\n\tconst cipherText = output.join('');\n\tdocument.getElementById('output').value = cipherText;\n};\n\nconst decode = () => {\n\tconst input = document.getElementById('input').value;;\n\tconst shift = parseInt(document.getElementById('shift').value);\n\tconst language = document.getElementById('language').value;\n\tconst chosenAlphabet = alphabets[language];\n\tlet output = [];\n\n\tfor (let char of input) {\n\t\tconst currentPosition = Cipher.determineLetterPosition(char, chosenAlphabet);\n\t\tif (currentPosition === -1) {\n\t\t\toutput.push(char);\n\t\t} else {\n\t\t\toutput.push(determineLetter(char, currentPosition, shift, chosenAlphabet, false));\n\t\t}\n\t}\n\tconst cipherText = output.join('');\n\tdocument.getElementById('output').value = cipherText;\n};\n\nencodeButton.addEventListener('click', encode);\nencodeButton.addEventListener('click', flip);\n\ndecodeButton.addEventListener('click', decode);\ndecodeButton.addEventListener('click', flip);\n\ninput.addEventListener('keyup', pressEnter);"]}